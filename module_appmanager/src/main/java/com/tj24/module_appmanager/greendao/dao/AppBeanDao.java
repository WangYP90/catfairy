package com.tj24.module_appmanager.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tj24.module_appmanager.greendao.base.AppsTypeConverter;
import java.util.List;

import com.tj24.module_appmanager.bean.AppBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_BEAN".
*/
public class AppBeanDao extends AbstractDao<AppBean, String> {

    public static final String TABLENAME = "APP_BEAN";

    /**
     * Properties of entity AppBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PackageName = new Property(0, String.class, "packageName", true, "PACKAGE_NAME");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Ico = new Property(2, String.class, "ico", false, "ICO");
        public final static Property FirstIntalTime = new Property(3, long.class, "firstIntalTime", false, "FIRST_INTAL_TIME");
        public final static Property LastUpdateTime = new Property(4, long.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property VersionCode = new Property(5, int.class, "versionCode", false, "VERSION_CODE");
        public final static Property VersionName = new Property(6, String.class, "versionName", false, "VERSION_NAME");
        public final static Property ApkSourceDir = new Property(7, String.class, "apkSourceDir", false, "APK_SOURCE_DIR");
        public final static Property Letters = new Property(8, String.class, "letters", false, "LETTERS");
        public final static Property IsSystemApp = new Property(9, boolean.class, "isSystemApp", false, "IS_SYSTEM_APP");
        public final static Property IsCanOpen = new Property(10, boolean.class, "isCanOpen", false, "IS_CAN_OPEN");
        public final static Property LastOpenTime = new Property(11, long.class, "lastOpenTime", false, "LAST_OPEN_TIME");
        public final static Property TopProcessTime = new Property(12, long.class, "topProcessTime", false, "TOP_PROCESS_TIME");
        public final static Property OpenNum = new Property(13, int.class, "openNum", false, "OPEN_NUM");
        public final static Property Type = new Property(14, String.class, "type", false, "TYPE");
        public final static Property IsSelected = new Property(15, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property Priority = new Property(16, int.class, "priority", false, "PRIORITY");
        public final static Property Describe = new Property(17, String.class, "describe", false, "DESCRIBE");
        public final static Property Size = new Property(18, long.class, "size", false, "SIZE");
    }

    private final AppsTypeConverter typeConverter = new AppsTypeConverter();

    public AppBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AppBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_BEAN\" (" + //
                "\"PACKAGE_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: packageName
                "\"NAME\" TEXT," + // 1: name
                "\"ICO\" TEXT," + // 2: ico
                "\"FIRST_INTAL_TIME\" INTEGER NOT NULL ," + // 3: firstIntalTime
                "\"LAST_UPDATE_TIME\" INTEGER NOT NULL ," + // 4: lastUpdateTime
                "\"VERSION_CODE\" INTEGER NOT NULL ," + // 5: versionCode
                "\"VERSION_NAME\" TEXT," + // 6: versionName
                "\"APK_SOURCE_DIR\" TEXT," + // 7: apkSourceDir
                "\"LETTERS\" TEXT," + // 8: letters
                "\"IS_SYSTEM_APP\" INTEGER NOT NULL ," + // 9: isSystemApp
                "\"IS_CAN_OPEN\" INTEGER NOT NULL ," + // 10: isCanOpen
                "\"LAST_OPEN_TIME\" INTEGER NOT NULL ," + // 11: lastOpenTime
                "\"TOP_PROCESS_TIME\" INTEGER NOT NULL ," + // 12: topProcessTime
                "\"OPEN_NUM\" INTEGER NOT NULL ," + // 13: openNum
                "\"TYPE\" TEXT," + // 14: type
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 15: isSelected
                "\"PRIORITY\" INTEGER NOT NULL ," + // 16: priority
                "\"DESCRIBE\" TEXT," + // 17: describe
                "\"SIZE\" INTEGER NOT NULL );"); // 18: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppBean entity) {
        stmt.clearBindings();
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(1, packageName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(3, ico);
        }
        stmt.bindLong(4, entity.getFirstIntalTime());
        stmt.bindLong(5, entity.getLastUpdateTime());
        stmt.bindLong(6, entity.getVersionCode());
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(7, versionName);
        }
 
        String apkSourceDir = entity.getApkSourceDir();
        if (apkSourceDir != null) {
            stmt.bindString(8, apkSourceDir);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(9, letters);
        }
        stmt.bindLong(10, entity.getIsSystemApp() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsCanOpen() ? 1L: 0L);
        stmt.bindLong(12, entity.getLastOpenTime());
        stmt.bindLong(13, entity.getTopProcessTime());
        stmt.bindLong(14, entity.getOpenNum());
 
        List type = entity.getType();
        if (type != null) {
            stmt.bindString(15, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindLong(16, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(17, entity.getPriority());
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(18, describe);
        }
        stmt.bindLong(19, entity.getSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppBean entity) {
        stmt.clearBindings();
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(1, packageName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(3, ico);
        }
        stmt.bindLong(4, entity.getFirstIntalTime());
        stmt.bindLong(5, entity.getLastUpdateTime());
        stmt.bindLong(6, entity.getVersionCode());
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(7, versionName);
        }
 
        String apkSourceDir = entity.getApkSourceDir();
        if (apkSourceDir != null) {
            stmt.bindString(8, apkSourceDir);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(9, letters);
        }
        stmt.bindLong(10, entity.getIsSystemApp() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsCanOpen() ? 1L: 0L);
        stmt.bindLong(12, entity.getLastOpenTime());
        stmt.bindLong(13, entity.getTopProcessTime());
        stmt.bindLong(14, entity.getOpenNum());
 
        List type = entity.getType();
        if (type != null) {
            stmt.bindString(15, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindLong(16, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(17, entity.getPriority());
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(18, describe);
        }
        stmt.bindLong(19, entity.getSize());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AppBean readEntity(Cursor cursor, int offset) {
        AppBean entity = new AppBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // packageName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ico
            cursor.getLong(offset + 3), // firstIntalTime
            cursor.getLong(offset + 4), // lastUpdateTime
            cursor.getInt(offset + 5), // versionCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // versionName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // apkSourceDir
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // letters
            cursor.getShort(offset + 9) != 0, // isSystemApp
            cursor.getShort(offset + 10) != 0, // isCanOpen
            cursor.getLong(offset + 11), // lastOpenTime
            cursor.getLong(offset + 12), // topProcessTime
            cursor.getInt(offset + 13), // openNum
            cursor.isNull(offset + 14) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 14)), // type
            cursor.getShort(offset + 15) != 0, // isSelected
            cursor.getInt(offset + 16), // priority
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // describe
            cursor.getLong(offset + 18) // size
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppBean entity, int offset) {
        entity.setPackageName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIco(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstIntalTime(cursor.getLong(offset + 3));
        entity.setLastUpdateTime(cursor.getLong(offset + 4));
        entity.setVersionCode(cursor.getInt(offset + 5));
        entity.setVersionName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setApkSourceDir(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLetters(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSystemApp(cursor.getShort(offset + 9) != 0);
        entity.setIsCanOpen(cursor.getShort(offset + 10) != 0);
        entity.setLastOpenTime(cursor.getLong(offset + 11));
        entity.setTopProcessTime(cursor.getLong(offset + 12));
        entity.setOpenNum(cursor.getInt(offset + 13));
        entity.setType(cursor.isNull(offset + 14) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setIsSelected(cursor.getShort(offset + 15) != 0);
        entity.setPriority(cursor.getInt(offset + 16));
        entity.setDescribe(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSize(cursor.getLong(offset + 18));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AppBean entity, long rowId) {
        return entity.getPackageName();
    }
    
    @Override
    public String getKey(AppBean entity) {
        if(entity != null) {
            return entity.getPackageName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppBean entity) {
        return entity.getPackageName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
